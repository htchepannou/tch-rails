/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tchepannou.rails.engine.container;

import com.tchepannou.rails.core.api.ActionContext;
import com.tchepannou.rails.core.api.ActionController;
import com.tchepannou.rails.core.api.ActionInterceptor;
import com.tchepannou.rails.core.api.ActiveRecord;
import com.tchepannou.rails.core.api.ContainerContext;
import com.tchepannou.rails.core.api.Resource;
import com.tchepannou.rails.core.api.RestoreViewResource;
import com.tchepannou.rails.core.exception.ResourceNotFoundException;
import com.tchepannou.rails.core.util.EntityManagerThreadLocal;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.persistence.Entity;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.log4j.Logger;

/**
 * Decorator for {@link ActionController}
 * 
 * @author herve
 */
public class ActionControllerWrapper
{
    //-- Static Attribute
    private static final Logger LOG = Logger.getLogger (ActionControllerWrapper.class);
    //-- Attributes
    private String __name;
    private boolean _initialized;
    private ContainerContext _containerContext;
    private Class<? extends ActiveRecord> _modelClass;
    private Class<? extends ActionController> _controllerClass;
    private final Map<String, Method> _actionMethods = new HashMap<String, Method> ();
    private boolean _rollback;

    //-- Public method
    public void init (ContainerContext containerContext)
    {
        if ( LOG.isTraceEnabled () )
        {
            LOG.trace ("init()");
        }

        _containerContext = containerContext;
        _initialized = true;
    }

    public void destroy ()
    {
        if ( LOG.isTraceEnabled () )
        {
            LOG.trace ("destroy()");
        }
        _actionMethods.clear ();
        _containerContext = null;
        _initialized = false;
    }

    public ActionController service (String path, HttpServletRequest request, HttpServletResponse response)
        throws IOException
    {
        if ( !_initialized )
        {
            throw new IllegalStateException ("Not initialized. call init() first");
        }

        ActionController controller = createActionController (request, response);
        service (path, controller);

        return controller;
    }

    //-- Protected methods
    /**
     * This method is called for retrieving from the database a model object
     *
     * @param id ID of the model object
     * 
     * @return model found or <code>null</code> if not found
     */
    protected ActiveRecord findActiveRecord (long id)
    {
        return EntityManagerThreadLocal.getEntityManager ().find (getModelClass (), id);
    }

    /**
     * This method executes the action method in the controller
     *
    //     * @param action
     * @param controller
     * @throws IOException
     */
    protected boolean doPerformAction (String path, ActionController controller)
        throws IOException
    {
        /* find the model */
        long id = controller.getRequestParameterAsLong ("id", 0);
        ActiveRecord model = null;
        if ( id > 0 && hasPersistentModelClass () )
        {
            model = findActiveRecord (id);
            if ( model == null )
            {
                String msg = getModelClass ().getName () + "{" + id + "} not found";
                HttpServletResponse response = controller.getActionContext ().getResponse ();

                LOG.error (msg);
                response.sendError (404, msg);
                return false;
            }
        }

        /* Find the appropiate method */
        boolean withModel = true;
        String action = controller.convertPathToAction (path);
        int i = action.indexOf (".");
        if ( i > 0 )
        {
            action = action.substring (0, i);   // remove the extension
        }

        Method method = getActionMethod (action, withModel);
        if ( method == null )
        {
            withModel = false;
            method = getActionMethod (action, withModel);
        }

        /* Perform the action */
        if ( method != null )
        {
            return doPerformAction (method, controller, model, withModel);
        }
        else
        {
            if ( LOG.isDebugEnabled () )
            {
                LOG.debug (getControllerClass ().getName () + "." + action + "() not found. No action to perform");
            }
        }

        return true;
    }

    /**
     * This method renders the result into the <code>HttpServletResponse</code>
     *
     * @param action
     * @param controller
     * @throws IOException
     */
    protected void doRender (String path, ActionController controller)
        throws IOException
    {
        ActionContext ac = controller.getActionContext ();
        HttpServletResponse response = ac.getResponse ();

        /* Render */
        Resource resource = controller.getResource ();
        if ( resource == null )
        {
            String action = controller.convertPathToAction (path);
            resource = controller.createDefaultResource (controller.getName (), action);
        }
        try
        {
            if (isModified (controller))
            {
                /* Restore the state of the view */
                restoreState (resource, controller);

                /* Output */
                if ( LOG.isDebugEnabled () )
                {
                    LOG.debug ("Outputting " + resource);
                }
                resource.output (response);
            }

            /* headers */
            addHeaders (response, controller);
        }
        catch ( ResourceNotFoundException e )
        {
            LOG.error ("Unable to render the view", e);
            response.sendError (404, e.getMessage ());
        }
    }

    private boolean isModified (ActionController controller)
        throws IOException
    {
        long lastModifiedTime = controller.getLastModificationDate ();
        if ( lastModifiedTime >= 0 )
        {
            HttpServletRequest request = controller.getRequest ();
            long requestModifiedTime = request.getDateHeader ("If-Modified-Since");
            if ( (requestModifiedTime >= 0) && (requestModifiedTime <= lastModifiedTime) )
            {
                HttpServletResponse response = controller.getResponse ();
                response.sendError (HttpServletResponse.SC_NOT_MODIFIED);
                return false;
            }
        }
        return true;
    }

    private void addHeaders (HttpServletResponse response, ActionController controller)
    {
        Map<String, Object> headers = controller.getResponseHeaders ();
        for ( String name: headers.keySet () )
        {
            Object value = headers.get (name);
            if ( value instanceof Date )
            {
                response.setDateHeader (name, (( Date ) value).getTime ());
            }
            else if ( value != null )
            {
                response.setHeader (name, value.toString ());
            }
        }

        long lastModified = controller.getLastModificationDate ();
        if ( LOG.isDebugEnabled () )
        {
            LOG.debug (" Last-Modified: " + lastModified);
        }
        if ( lastModified > 0 )
        {
            response.addDateHeader ("Last-Modified", lastModified);
        }

        long expirySeconds = controller.getExpirySeconds ();
        if ( LOG.isDebugEnabled () )
        {
            LOG.debug (" Expiry-Seconds: " + expirySeconds);
        }
        if ( expirySeconds > 0 )
        {
            long expires = System.currentTimeMillis () + expirySeconds * 1000;
            response.addDateHeader ("Expires", expires);
            response.addHeader ("Cache-Control", "max-age=" + expirySeconds + ", must-revalidate");            
        }
        response.addHeader ("Vary", "Accept-Encoding");
    }

    /**
     * This method is called by {@link #doPerformAction(java.lang.String, com.tchepannou.rails.core.api.ActionController)}
     * in order to get the method to execute in the controller based on the action
     *
     * @param action        Action
     * @param withModel     if <code>true</code>, returns the method with the {@link ActiveRecord} as parameters
     *
     * @return Method found or <code>null</code>
     */
    protected Method findActionMethod (String action, boolean withModel)
    {
        if ( withModel && getModelClass () == null )
        {
            return null;
        }

        for ( Method method: getControllerClass ().getMethods () )
        {
            if ( action.equalsIgnoreCase (method.getName ()) )
            {
                Class[] params = method.getParameterTypes ();

                if ( withModel )
                {
                    if ( params.length == 1 )
                    {
                        Class type = params[0];
                        if ( getModelClass ().isAssignableFrom (type) )
                        {
                            return method;
                        }
                    }
                }
                else if ( params == null || params.length == 0 )
                {
                    return method;
                }
            }
        }
        return null;
    }

    //-- Private methods
    private void restoreState (Resource resource, ActionController controller)
        throws IOException
    {
        if ( resource instanceof RestoreViewResource )
        {
            String path = (( RestoreViewResource ) resource).getPath ();
            if ( LOG.isDebugEnabled () )
            {
                LOG.debug ("Restoring the state of the view of " + path);
            }

            doPerformAction (path, controller);
        }
    }

    private void service (String path, ActionController controller)
        throws IOException
    {
        /* Pre-interceptor */
        int status = ActionInterceptor.CONTINUE;
        List<ActionInterceptor> interceptors = controller.getActionInterceptors ();
        int size = interceptors.size ();
        for ( int i = 0; i < size; i++ )
        {
            ActionInterceptor itc = interceptors.get (i);
            status = itc.before (controller);
            if ( status != ActionInterceptor.CONTINUE )
            {
                break;
            }
        }

        /* Service */
        try
        {
            if ( status != ActionInterceptor.STOP )
            {
                if ( doPerformAction (path, controller) )
                {
                    doRender (path, controller);
                }
            }
        }
        finally
        {
            /* Post-interceptor */
            for ( int i = size - 1; i >= 0; i-- )
            {
                ActionInterceptor itc = interceptors.get (i);
                itc.after (controller);
            }
        }
    }

    private int pre (Method method, ActionController controller)
        throws IOException
    {
        int status = ActionInterceptor.CONTINUE;
        List<ActionInterceptor> interceptors = controller.getActionInterceptors ();
        int size = interceptors.size ();
        for ( int i = 0; i < size; i++ )
        {
            ActionInterceptor itc = interceptors.get (i);
            status = itc.before (method, controller);
            if ( status != ActionInterceptor.CONTINUE )
            {
                break;
            }
        }
        return status;
    }

    private boolean doPerformAction (Method method, ActionController controller, ActiveRecord model, boolean withModel)
        throws IOException
    {
        int status = pre (method, controller);
        Throwable ex = null;
        try
        {
            if ( status != ActionInterceptor.STOP )
            {
                Object[] args = withModel
                    ? new Object[]
                    {
                        model
                    }
                    : null;
                method.invoke (controller, args);
            }
        }
        catch ( InvocationTargetException e )
        {
            LOG.error ("Error while performing the action", e);
            ex = e;
        }
        catch ( IllegalAccessException e )
        {
            LOG.error ("Error while performing the action", e);
            ex = e;
        }
        finally
        {
            /* Post-interceptor */
            post (method, controller, ex);
        }
        return status == ActionInterceptor.CONTINUE;
    }

    private void post (Method method, ActionController controller, Throwable ex)
        throws IOException
    {
        List<ActionInterceptor> interceptors = controller.getActionInterceptors ();
        int size = interceptors.size ();
        for ( int i = size - 1; i >= 0; i-- )
        {
            ActionInterceptor itc = interceptors.get (i);
            itc.after (method, controller, ex);
        }
    }

    private ActionController createActionController (HttpServletRequest request, HttpServletResponse response)
    {
        try
        {
            ActionController controller = _controllerClass.newInstance ();
            ActionContext context = createActionContext (request, response);
            controller.setActionContext (context);

            Map flash = ( Map ) controller.getSession (ActionController.SESSION_FLASH);
            if ( flash != null )
            {
                controller.setFlash (flash);
                controller.removeSession (ActionController.SESSION_FLASH);
            }
            return controller;
        }
        catch ( InstantiationException ex )
        {
            throw new com.tchepannou.rails.core.exception.InstantiationException ("Unable to instantiate " + _controllerClass, ex);
        }
        catch ( IllegalAccessException ex )
        {
            throw new com.tchepannou.rails.core.exception.InstantiationException ("Unable to instantiate " + _controllerClass, ex);
        }
    }

    private ActionContext createActionContext (final HttpServletRequest request, final HttpServletResponse response)
    {
        return new ActionContext ()
        {
            public ContainerContext getContainerContext ()
            {
                return _containerContext;
            }

            public HttpServletRequest getRequest ()
            {
                return request;
            }

            public HttpServletResponse getResponse ()
            {
                return response;
            }

            public void setRollback (boolean rollback)
            {
                throw new IllegalStateException ("Testing...");
                //_rollback = rollback;
            }

            public boolean isRollback ()
            {
                return _rollback;
            }
        };
    }

    private Method getActionMethod (String name, boolean withModel)
    {
        String xname = name.toLowerCase ();
        String key = xname + "[" + withModel + "]";
        Method method = _actionMethods.get (key);
        if ( method == null )
        {
            method = findActionMethod (name, withModel);

            synchronized ( _actionMethods )
            {
                _actionMethods.put (key, method);
            }
        }
        return method;
    }

    private boolean hasPersistentModelClass ()
    {
        return _modelClass != null
            && _modelClass.getAnnotation (Entity.class) != null;
    }

    //-- Getter/Setter
    public String getName ()
    {
        if ( __name == null )
        {
            __name = ActionController.getName (_controllerClass);
        }
        return __name;
    }

    public Class<? extends ActiveRecord> getModelClass ()
    {
        return _modelClass;
    }

    public void setModelClass (Class<? extends ActiveRecord> modelClass)
    {
        this._modelClass = modelClass;
    }

    public Class<? extends ActionController> getControllerClass ()
    {
        return _controllerClass;
    }

    public void setControllerClass (Class<? extends ActionController> controllerClass)
    {
        _controllerClass = controllerClass;
    }

    public boolean isInitialized ()
    {
        return _initialized;
    }

    //-- Object overrides
    @Override
    public String toString ()
    {
        return "ActionControllerWrapper{" + getName () + "}";
    }
}
