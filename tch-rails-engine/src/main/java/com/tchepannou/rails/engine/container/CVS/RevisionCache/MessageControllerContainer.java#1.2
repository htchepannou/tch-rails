/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tchepannou.rails.engine.container;

import com.tchepannou.rails.core.annotation.MessageSource;
import com.tchepannou.rails.core.api.ContainerContext;
import com.tchepannou.rails.core.api.MessageController;
import com.tchepannou.rails.core.exception.InitializationException;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import org.apache.log4j.Logger;

/**
 * Default implementation of {@link ActionControllerProvider}.
 *
 * @author herve
 */
public class MessageControllerContainer
{
    //-- Static Attribute
    private static final Logger LOG = Logger.getLogger (MessageControllerContainer.class);
    private static final String CLASS_SUFFIX = "MessageController";
    
    
    //-- Attribute
    private ContainerContext _containerContext;
    private List<MessageControllerWrapper> _wrappers;
    private boolean _initialized;
    
    //-- Constructeur
    public MessageControllerContainer ()
    {
    }


    //-- Public method
    public void init (ContainerContext containerContext)
    {
        if (LOG.isTraceEnabled ())
        {
            LOG.trace ("init(" + containerContext + ")");
        }
        _containerContext = containerContext;
        try
        {
            loadMessagingControllerWrappers (_containerContext.getBasePackage () + ".message");
            for (MessageControllerWrapper wrapper : _wrappers)
            {
                if (LOG.isDebugEnabled ())
                {
                    LOG.debug ("Initializing " + wrapper);
                }
                wrapper.init (containerContext);
            }

            _initialized = true;
        }
        catch (Exception e)
        {
            throw new InitializationException ("Unable to initialized the MessagingControllerContainer", e);
        }
    }

    public void destroy ()
    {
        if (LOG.isTraceEnabled ())
        {
            LOG.trace ("destroy()");
        }

        for (MessageControllerWrapper wrapper : _wrappers)
        {
            if (LOG.isDebugEnabled ())
            {
                LOG.debug ("Destroying " + wrapper);
            }
            wrapper.destroy ();
        }

        _containerContext = null;
        _wrappers.clear ();
        _initialized = false;
    }

    public boolean isInitialized ()
    {
        return _initialized;
    }

    public List<MessageControllerWrapper> getMessageControllerWrappers ()
    {
        return _wrappers;
    }

    //-- Private
    /**
     * Scans all classes accessible from the context class loader which belong to the given package and subpackages.
     *
     * @param packageName The base package
     * @return The classes
     * @throws ClassNotFoundException
     * @throws IOException
     */
    private List<Class> loadMessagingControllerWrappers (String packageName)
        throws ClassNotFoundException,
               IOException
    {
        _wrappers = new ArrayList<MessageControllerWrapper> ();
        
        /* Package directory */
        ClassLoader classLoader = Thread.currentThread ().getContextClassLoader ();
        assert classLoader != null;
        String path = packageName.replace ('.', '/');
        Enumeration<URL> resources = classLoader.getResources (path);
        List<File> dirs = new ArrayList<File> ();
        while ( resources.hasMoreElements () )
        {
            URL resource = resources.nextElement ();
            dirs.add (new File (resource.getFile ()));
        }

        /* Load the classes */
        ArrayList<Class> classes = new ArrayList<Class> ();
        for ( File directory: dirs )
        {
            classes.addAll (loadClasses (directory, packageName));
        }
        return classes;
    }

    /**
     * Recursive method used to find all classes in a given directory and subdirs.
     *
     * @param directory   The base directory
     * @param packageName The package name for classes found inside the base directory
     * @return The classes
     * @throws ClassNotFoundException
     */
    private List<Class> loadClasses (File directory, String packageName)
        throws ClassNotFoundException
    {
        List<Class> classes = new ArrayList<Class> ();
        if ( !directory.exists () )
        {
            return classes;
        }
        File[] files = directory.listFiles ();
        for ( File file: files )
        {
            String name = file.getName ();
            if ( name.endsWith (CLASS_SUFFIX + ".class"))
            {
                Class clazz = Class.forName (packageName + '.' + file.getName ().substring (0, file.getName ().length () - 6));
                int modifier = clazz.getModifiers ();
                if (Modifier.isPublic (modifier)
                    && !Modifier.isAbstract (modifier)
                    && !Modifier.isInterface (modifier)
                    && MessageController.class.isAssignableFrom (clazz))
                {
                    registerActionController (clazz);
                }
            }
        }
        return classes;
    }

    private void registerActionController (Class<? extends MessageController> clazz)
    {
        MessageSource msg = (MessageSource)clazz.getAnnotation (MessageSource.class);
        if (msg != null)
        {
            MessageControllerWrapper wrapper = new MessageControllerWrapper ();
            wrapper.setControllerClass (clazz);
            wrapper.setDestinationName (msg.name ());
            wrapper.setDestinationType (msg.type ());
            
            if (LOG.isDebugEnabled ())
            {
                LOG.debug ("Registering MessagingController: " + clazz);
            }
            _wrappers.add (wrapper);
        }
    }
}
