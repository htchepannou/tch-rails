/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tchepannou.rails.core.service;

import com.tchepannou.rails.core.api.MailController;
import com.tchepannou.rails.core.api.OptionService;
import com.tchepannou.rails.core.api.MailService;
import com.tchepannou.util.StringUtil;
import java.io.File;
import java.util.List;
import java.util.Properties;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import org.apache.log4j.Logger;

/**
 * Default implementation of {@link MailService}.
 * <p>
 * This service depends on the following services:
 * <ul>
 *  <li>{@link OptionService}</li>
 * </ul>
 * 
 * @author herve
 */
public class SMTPService
    extends AbstractService
    implements MailService
{
    //-- Static Attribute
    private static final Logger LOG = Logger.getLogger (SMTPService.class);
    private static final String SMTP = "smtp";
    

    //-- MailService overrides
    public void send (MailController controller)
        throws MessagingException
    {
        if ( LOG.isTraceEnabled () )
        {
            LOG.trace ("send (" + controller + ")");
        }

        /* Open the Session */
        Authenticator auth = createAuthenticator (controller);
        Properties p = getJavaMailProperties ();
        Session session = Session.getInstance (p, auth);

        /* Create the message */
        MimeMessage mm = createMimeMessage (controller, session, p);

        /* Send the message */
        Transport ts = session.getTransport (SMTP);
        ts.connect ();
        try
        {
            if ( LOG.isDebugEnabled () )
            {
                LOG.debug ("Sending email");
                LOG.debug ("JavaMail: " + p);
                LOG.debug ("From:     " + controller.getFrom ());
                LOG.debug ("To:       " + StringUtil.merge (controller.getTo (), ","));
                LOG.debug ("Cc:       " + StringUtil.merge (controller.getCc (), ","));
                LOG.debug ("Bcc:      " + StringUtil.merge (controller.getBcc (), ","));
                LOG.debug ("Subject:  " + controller.getSubject ());
                LOG.debug ("Body\n" + controller.getBody ());
            }
            if ( hasRecipients (controller) )
            {
                Transport.send (mm);
            }
            else
            {
                LOG.warn ("No email recipients. Ignoring the email sending.");
            }
        }
        finally
        {
            ts.close ();
        }
    }


    
    //-- Private methods
    private MimeMessage createMimeMessage (MailController controller, Session session, Properties props)
        throws MessagingException
    {
        MimeMessage msg = new MimeMessage (session);
        setFrom (controller, msg, props);
        addRecipients (controller, msg);
        setSubject (controller, msg);

        Multipart content = new MimeMultipart();
        msg.setContent (content);
        
        /* Text */
        String body = controller.getBody ();
        if (!StringUtil.isEmpty (body))
        {
            MimeBodyPart part = new MimeBodyPart();
            part.setText (body);
            content.addBodyPart (part);
        }

        /* Attachments */
        List<File> attachments = controller.getAttachments ();
        if (!attachments.isEmpty ())
        {
            for (File attachment : attachments)
            {
                MimeBodyPart part = new MimeBodyPart();
                DataSource source = new FileDataSource(attachment);
                part.setDataHandler(new DataHandler (source));
                part.setFileName(attachment.getName ());
                content.addBodyPart(part);
            }
        }

        return msg;
    }

    private void setFrom (MailController controller, MimeMessage msg, Properties props)
        throws MessagingException
    {
        String from = controller.getFrom ();
        if ( StringUtil.isEmpty (from) )
        {
            from = props.getProperty (OptionService.OPTION_MAIL_FROM);
        }

        if ( !StringUtil.isEmpty (from) )
        {
            msg.setFrom (new InternetAddress (from));
        }
    }

    private void addRecipients (MailController controller, MimeMessage msg)
        throws MessagingException
    {
        addRecipients (controller.getTo (), Message.RecipientType.TO, msg);
        addRecipients (controller.getCc (), Message.RecipientType.CC, msg);
        addRecipients (controller.getBcc (), Message.RecipientType.BCC, msg);
    }

    private void addRecipients (List<String> recipients, Message.RecipientType type, MimeMessage msg)
        throws MessagingException
    {
        for ( String recipient: recipients )
        {
            msg.addRecipient (type, new InternetAddress (recipient));
        }
    }

    private void setSubject (MailController controller, MimeMessage msg)
        throws MessagingException
    {
        String subject = controller.getSubject ();
        msg.setSubject (!StringUtil.isEmpty (subject)
            ? subject
            : StringUtil.EMPTY);
    }

    private void setBody (MailController controller, MimeMessage msg)
        throws MessagingException
    {
        String body = controller.getBody ();
        String type = controller.getContentType ();
        msg.setContent (body, type);
    }

    private Authenticator createAuthenticator (MailController controller)
    {
        OptionService srv = ( OptionService ) findService (OptionService.class);
        if ( srv != null )
        {
            String auth = srv.get (OptionService.OPTION_MAIL_SMTP_AUTH, "false");
            if ( "true".equals (auth) )
            {
                String user = srv.get (OptionService.OPTION_MAIL_SMTP_USER, "");
                String password = srv.get (OptionService.OPTION_MAIL_SMTP_PASSWORD, "");

                return new AuthenticatorImpl (user, password);
            }
        }
        return null;
    }

    private Properties getJavaMailProperties ()
    {
        OptionService srv = getOptionService ();
        Properties p = new Properties ();
        setProperty (p, OptionService.OPTION_MAIL_DEBUG, OptionService.DEFAULT_MAIL_DEBUG, srv);
        setProperty (p, OptionService.OPTION_MAIL_FROM, null, srv);
        setProperty (p, OptionService.OPTION_MAIL_SMTP_HOST, OptionService.DEFAULT_MAIL_SMTP_HOST, srv);
        setProperty (p, OptionService.OPTION_MAIL_SMTP_PORT, OptionService.DEFAULT_MAIL_SMTP_PORT, srv);
        setProperty (p, OptionService.OPTION_MAIL_SMTP_AUTH, null, srv);
        return p;
    }

    private void setProperty (Properties p, String name, String defaultValue, OptionService srv)
    {
        String value = srv.get (name, defaultValue);
        if ( LOG.isDebugEnabled () )
        {
            LOG.debug (name + "=" + value);
        }
        if ( value != null )
        {
            p.put (name, value);
        }
    }

    private void setProperty (Properties p, String name, int defaultValue, OptionService srv)
    {
        String value = srv.get (name, String.valueOf (defaultValue));
        setProperty (p, name, value, srv);
    }

    private void setProperty (Properties p, String name, boolean defaultValue, OptionService srv)
    {
        String value = srv.get (name, String.valueOf (defaultValue));
        setProperty (p, name, value, srv);
    }

    private boolean hasRecipients (MailController controller)
    {
        return controller.getTo ().size () > 0 || controller.getBcc ().size () > 0 || controller.getCc ().size () > 0;
    }


    //-- Inner classes
    /**
     *
     * SMTP Authenticator
     */
    private static class AuthenticatorImpl
        extends Authenticator
    {
        //-- Attributes
        private String _user;
        private String _password;

        //-- Constructors
        public AuthenticatorImpl (String user, String password)
        {
            _user = user;
            _password = password;
        }

        //-- Authenticator overrides
        @Override
        public PasswordAuthentication getPasswordAuthentication ()
        {
            return new PasswordAuthentication (_user, _password);
        }

    }
}
