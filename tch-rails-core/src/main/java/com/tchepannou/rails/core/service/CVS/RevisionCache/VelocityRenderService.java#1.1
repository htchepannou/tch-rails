package com.tchepannou.rails.core.service;

import com.tchepannou.rails.core.api.RenderService;
import com.tchepannou.rails.core.api.ServiceContext;
import com.tchepannou.rails.core.exception.InitializationException;
import com.tchepannou.rails.core.exception.RenderException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import javax.servlet.ServletContext;
import org.apache.log4j.Logger;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;
import org.apache.velocity.exception.MethodInvocationException;
import org.apache.velocity.exception.ParseErrorException;
import org.apache.velocity.exception.ResourceNotFoundException;
import org.apache.velocity.runtime.parser.TemplateParseException;

/**
 * Implementation of {@link RenderService} based on <a href="http://velocity.apache.org">Jakarta Velocity</a>
 * 
 * @author herve
 */
public class VelocityRenderService
    extends AbstractService
    implements RenderService
{
    //-- Static Attribute
    private static final Logger LOG = Logger.getLogger (VelocityRenderService.class);
    private static final String TEMPLATE_SUFFIX = ".vm";


    //-- Attribute
    private VelocityEngine _engine = new VelocityEngine ();

    //-- RenderService overrides
    public void render (String path, Map data, Writer writer, String encoding)
        throws RenderException, IOException
    {
        if ( LOG.isTraceEnabled () )
        {
            LOG.trace ("render(" + path + "," + data + "," + writer + "," + encoding + ")");
        }

        if (!isInitialized ())
        {
            throw new IllegalStateException ("The service is not initialized. call init() first");
        }
        
        try
        {
            // Important: Clone the data to make sure that when the
            // template is rendered, the data map is not altered!
            Map cdata = new HashMap (data);

            // Render
            VelocityContext vc = new VelocityContext (cdata);
            String template = path + TEMPLATE_SUFFIX;
            _engine.mergeTemplate (template, encoding, vc, writer);
        }
        catch ( ResourceNotFoundException ex )
        {
            throw new com.tchepannou.rails.core.exception.ResourceNotFoundException (ex.getMessage (), path, -1, ex);
        }
        catch (TemplateParseException ex)
        {
            throw new RenderException ("Error in the template", path, ex.getLineNumber (), ex);
        }
        catch ( ParseErrorException ex )
        {
            throw new RenderException ("Syntax error", path, ex.getLineNumber (), ex);
        }
        catch ( MethodInvocationException ex )
        {
            throw new RenderException ("Method invocation error", path, ex.getLineNumber (), ex);
        }
        catch ( Exception ex )
        {
            throw new RenderException ("Unexpected error", path, 0, ex);
        }
    }

    //-- Service override
    @Override
    public void init (ServiceContext serviceContext)
    {
        if (LOG.isTraceEnabled ())
        {
            LOG.trace("init(" + serviceContext + ")");
        }
        super.init (serviceContext);
        try
        {
            Properties p = loadVelocityProperties ();
            _engine = new VelocityEngine (p);
        }
        catch ( Exception e )
        {
            throw new InitializationException ("Unable to initialize the Render service", e);
        }
    }

    @Override
    public void destroy ()
    {
        if (LOG.isTraceEnabled ())
        {
            LOG.trace("destroy()");
        }
        super.destroy ();
        _engine = null;
    }


    private Properties loadVelocityProperties ()
        throws IOException
    {
        /* load the configuration */
        Properties p = new Properties ();
        try
        {
            p = loadConfigurationAsProperties ("velocity.properties");
        }
        catch (FileNotFoundException e)
        {
            LOG.warn ("Configuration not found");
        }

        /* set the root path */
        ServletContext context = getServiceContext ().getContainerContext ().getServletContext ();
        String rootDir = context.getRealPath ("/");
        p.setProperty ("file.resource.loader.path", rootDir);
        return p;
    }
}
